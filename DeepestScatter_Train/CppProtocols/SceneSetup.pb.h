// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneSetup.proto

#ifndef PROTOBUF_INCLUDED_SceneSetup_2eproto
#define PROTOBUF_INCLUDED_SceneSetup_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Vector.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_SceneSetup_2eproto 

namespace protobuf_SceneSetup_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_SceneSetup_2eproto
namespace Persistance {
class SceneSetup;
class SceneSetupDefaultTypeInternal;
extern SceneSetupDefaultTypeInternal _SceneSetup_default_instance_;
}  // namespace Persistance
namespace google {
namespace protobuf {
template<> ::Persistance::SceneSetup* Arena::CreateMaybeMessage<::Persistance::SceneSetup>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Persistance {

// ===================================================================

class SceneSetup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Persistance.SceneSetup) */ {
 public:
  SceneSetup();
  virtual ~SceneSetup();

  SceneSetup(const SceneSetup& from);

  inline SceneSetup& operator=(const SceneSetup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SceneSetup(SceneSetup&& from) noexcept
    : SceneSetup() {
    *this = ::std::move(from);
  }

  inline SceneSetup& operator=(SceneSetup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneSetup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneSetup* internal_default_instance() {
    return reinterpret_cast<const SceneSetup*>(
               &_SceneSetup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SceneSetup* other);
  friend void swap(SceneSetup& a, SceneSetup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SceneSetup* New() const final {
    return CreateMaybeMessage<SceneSetup>(NULL);
  }

  SceneSetup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SceneSetup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SceneSetup& from);
  void MergeFrom(const SceneSetup& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneSetup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cloud_path = 1;
  void clear_cloud_path();
  static const int kCloudPathFieldNumber = 1;
  const ::std::string& cloud_path() const;
  void set_cloud_path(const ::std::string& value);
  #if LANG_CXX11
  void set_cloud_path(::std::string&& value);
  #endif
  void set_cloud_path(const char* value);
  void set_cloud_path(const char* value, size_t size);
  ::std::string* mutable_cloud_path();
  ::std::string* release_cloud_path();
  void set_allocated_cloud_path(::std::string* cloud_path);

  // .Persistance.Vector3 light_direction = 3;
  bool has_light_direction() const;
  void clear_light_direction();
  static const int kLightDirectionFieldNumber = 3;
  private:
  const ::Persistance::Vector3& _internal_light_direction() const;
  public:
  const ::Persistance::Vector3& light_direction() const;
  ::Persistance::Vector3* release_light_direction();
  ::Persistance::Vector3* mutable_light_direction();
  void set_allocated_light_direction(::Persistance::Vector3* light_direction);

  // float cloud_size_m = 2;
  void clear_cloud_size_m();
  static const int kCloudSizeMFieldNumber = 2;
  float cloud_size_m() const;
  void set_cloud_size_m(float value);

  // @@protoc_insertion_point(class_scope:Persistance.SceneSetup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cloud_path_;
  ::Persistance::Vector3* light_direction_;
  float cloud_size_m_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_SceneSetup_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SceneSetup

// string cloud_path = 1;
inline void SceneSetup::clear_cloud_path() {
  cloud_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SceneSetup::cloud_path() const {
  // @@protoc_insertion_point(field_get:Persistance.SceneSetup.cloud_path)
  return cloud_path_.GetNoArena();
}
inline void SceneSetup::set_cloud_path(const ::std::string& value) {
  
  cloud_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Persistance.SceneSetup.cloud_path)
}
#if LANG_CXX11
inline void SceneSetup::set_cloud_path(::std::string&& value) {
  
  cloud_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Persistance.SceneSetup.cloud_path)
}
#endif
inline void SceneSetup::set_cloud_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cloud_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Persistance.SceneSetup.cloud_path)
}
inline void SceneSetup::set_cloud_path(const char* value, size_t size) {
  
  cloud_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Persistance.SceneSetup.cloud_path)
}
inline ::std::string* SceneSetup::mutable_cloud_path() {
  
  // @@protoc_insertion_point(field_mutable:Persistance.SceneSetup.cloud_path)
  return cloud_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SceneSetup::release_cloud_path() {
  // @@protoc_insertion_point(field_release:Persistance.SceneSetup.cloud_path)
  
  return cloud_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SceneSetup::set_allocated_cloud_path(::std::string* cloud_path) {
  if (cloud_path != NULL) {
    
  } else {
    
  }
  cloud_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cloud_path);
  // @@protoc_insertion_point(field_set_allocated:Persistance.SceneSetup.cloud_path)
}

// float cloud_size_m = 2;
inline void SceneSetup::clear_cloud_size_m() {
  cloud_size_m_ = 0;
}
inline float SceneSetup::cloud_size_m() const {
  // @@protoc_insertion_point(field_get:Persistance.SceneSetup.cloud_size_m)
  return cloud_size_m_;
}
inline void SceneSetup::set_cloud_size_m(float value) {
  
  cloud_size_m_ = value;
  // @@protoc_insertion_point(field_set:Persistance.SceneSetup.cloud_size_m)
}

// .Persistance.Vector3 light_direction = 3;
inline bool SceneSetup::has_light_direction() const {
  return this != internal_default_instance() && light_direction_ != NULL;
}
inline const ::Persistance::Vector3& SceneSetup::_internal_light_direction() const {
  return *light_direction_;
}
inline const ::Persistance::Vector3& SceneSetup::light_direction() const {
  const ::Persistance::Vector3* p = light_direction_;
  // @@protoc_insertion_point(field_get:Persistance.SceneSetup.light_direction)
  return p != NULL ? *p : *reinterpret_cast<const ::Persistance::Vector3*>(
      &::Persistance::_Vector3_default_instance_);
}
inline ::Persistance::Vector3* SceneSetup::release_light_direction() {
  // @@protoc_insertion_point(field_release:Persistance.SceneSetup.light_direction)
  
  ::Persistance::Vector3* temp = light_direction_;
  light_direction_ = NULL;
  return temp;
}
inline ::Persistance::Vector3* SceneSetup::mutable_light_direction() {
  
  if (light_direction_ == NULL) {
    auto* p = CreateMaybeMessage<::Persistance::Vector3>(GetArenaNoVirtual());
    light_direction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Persistance.SceneSetup.light_direction)
  return light_direction_;
}
inline void SceneSetup::set_allocated_light_direction(::Persistance::Vector3* light_direction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(light_direction_);
  }
  if (light_direction) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      light_direction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, light_direction, submessage_arena);
    }
    
  } else {
    
  }
  light_direction_ = light_direction;
  // @@protoc_insertion_point(field_set_allocated:Persistance.SceneSetup.light_direction)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Persistance

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_SceneSetup_2eproto
