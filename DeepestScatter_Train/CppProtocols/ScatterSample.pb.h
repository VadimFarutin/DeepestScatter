// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ScatterSample.proto

#ifndef PROTOBUF_INCLUDED_ScatterSample_2eproto
#define PROTOBUF_INCLUDED_ScatterSample_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Vector.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ScatterSample_2eproto 

namespace protobuf_ScatterSample_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_ScatterSample_2eproto
namespace Storage {
class ScatterSample;
class ScatterSampleDefaultTypeInternal;
extern ScatterSampleDefaultTypeInternal _ScatterSample_default_instance_;
}  // namespace Storage
namespace google {
namespace protobuf {
template<> ::Storage::ScatterSample* Arena::CreateMaybeMessage<::Storage::ScatterSample>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Storage {

// ===================================================================

class ScatterSample : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Storage.ScatterSample) */ {
 public:
  ScatterSample();
  virtual ~ScatterSample();

  ScatterSample(const ScatterSample& from);

  inline ScatterSample& operator=(const ScatterSample& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScatterSample(ScatterSample&& from) noexcept
    : ScatterSample() {
    *this = ::std::move(from);
  }

  inline ScatterSample& operator=(ScatterSample&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScatterSample& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScatterSample* internal_default_instance() {
    return reinterpret_cast<const ScatterSample*>(
               &_ScatterSample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ScatterSample* other);
  friend void swap(ScatterSample& a, ScatterSample& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScatterSample* New() const final {
    return CreateMaybeMessage<ScatterSample>(NULL);
  }

  ScatterSample* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScatterSample>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScatterSample& from);
  void MergeFrom(const ScatterSample& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScatterSample* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Storage.Vector3 point = 2;
  bool has_point() const;
  void clear_point();
  static const int kPointFieldNumber = 2;
  private:
  const ::Storage::Vector3& _internal_point() const;
  public:
  const ::Storage::Vector3& point() const;
  ::Storage::Vector3* release_point();
  ::Storage::Vector3* mutable_point();
  void set_allocated_point(::Storage::Vector3* point);

  // .Storage.Vector3 view_direction = 3;
  bool has_view_direction() const;
  void clear_view_direction();
  static const int kViewDirectionFieldNumber = 3;
  private:
  const ::Storage::Vector3& _internal_view_direction() const;
  public:
  const ::Storage::Vector3& view_direction() const;
  ::Storage::Vector3* release_view_direction();
  ::Storage::Vector3* mutable_view_direction();
  void set_allocated_view_direction(::Storage::Vector3* view_direction);

  // int32 scene_setup_id = 1;
  void clear_scene_setup_id();
  static const int kSceneSetupIdFieldNumber = 1;
  ::google::protobuf::int32 scene_setup_id() const;
  void set_scene_setup_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Storage.ScatterSample)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Storage::Vector3* point_;
  ::Storage::Vector3* view_direction_;
  ::google::protobuf::int32 scene_setup_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ScatterSample_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ScatterSample

// int32 scene_setup_id = 1;
inline void ScatterSample::clear_scene_setup_id() {
  scene_setup_id_ = 0;
}
inline ::google::protobuf::int32 ScatterSample::scene_setup_id() const {
  // @@protoc_insertion_point(field_get:Storage.ScatterSample.scene_setup_id)
  return scene_setup_id_;
}
inline void ScatterSample::set_scene_setup_id(::google::protobuf::int32 value) {
  
  scene_setup_id_ = value;
  // @@protoc_insertion_point(field_set:Storage.ScatterSample.scene_setup_id)
}

// .Storage.Vector3 point = 2;
inline bool ScatterSample::has_point() const {
  return this != internal_default_instance() && point_ != NULL;
}
inline const ::Storage::Vector3& ScatterSample::_internal_point() const {
  return *point_;
}
inline const ::Storage::Vector3& ScatterSample::point() const {
  const ::Storage::Vector3* p = point_;
  // @@protoc_insertion_point(field_get:Storage.ScatterSample.point)
  return p != NULL ? *p : *reinterpret_cast<const ::Storage::Vector3*>(
      &::Storage::_Vector3_default_instance_);
}
inline ::Storage::Vector3* ScatterSample::release_point() {
  // @@protoc_insertion_point(field_release:Storage.ScatterSample.point)
  
  ::Storage::Vector3* temp = point_;
  point_ = NULL;
  return temp;
}
inline ::Storage::Vector3* ScatterSample::mutable_point() {
  
  if (point_ == NULL) {
    auto* p = CreateMaybeMessage<::Storage::Vector3>(GetArenaNoVirtual());
    point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Storage.ScatterSample.point)
  return point_;
}
inline void ScatterSample::set_allocated_point(::Storage::Vector3* point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(point_);
  }
  if (point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    
  } else {
    
  }
  point_ = point;
  // @@protoc_insertion_point(field_set_allocated:Storage.ScatterSample.point)
}

// .Storage.Vector3 view_direction = 3;
inline bool ScatterSample::has_view_direction() const {
  return this != internal_default_instance() && view_direction_ != NULL;
}
inline const ::Storage::Vector3& ScatterSample::_internal_view_direction() const {
  return *view_direction_;
}
inline const ::Storage::Vector3& ScatterSample::view_direction() const {
  const ::Storage::Vector3* p = view_direction_;
  // @@protoc_insertion_point(field_get:Storage.ScatterSample.view_direction)
  return p != NULL ? *p : *reinterpret_cast<const ::Storage::Vector3*>(
      &::Storage::_Vector3_default_instance_);
}
inline ::Storage::Vector3* ScatterSample::release_view_direction() {
  // @@protoc_insertion_point(field_release:Storage.ScatterSample.view_direction)
  
  ::Storage::Vector3* temp = view_direction_;
  view_direction_ = NULL;
  return temp;
}
inline ::Storage::Vector3* ScatterSample::mutable_view_direction() {
  
  if (view_direction_ == NULL) {
    auto* p = CreateMaybeMessage<::Storage::Vector3>(GetArenaNoVirtual());
    view_direction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Storage.ScatterSample.view_direction)
  return view_direction_;
}
inline void ScatterSample::set_allocated_view_direction(::Storage::Vector3* view_direction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(view_direction_);
  }
  if (view_direction) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      view_direction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, view_direction, submessage_arena);
    }
    
  } else {
    
  }
  view_direction_ = view_direction;
  // @@protoc_insertion_point(field_set_allocated:Storage.ScatterSample.view_direction)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Storage

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_ScatterSample_2eproto
